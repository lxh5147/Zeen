apply plugin: "application"
mainClassName = "com.zeen.plagiarismchecker.application.impl.IndexBuilder"

def maxJVMHeapSize = "12g"

applicationDefaultJvmArgs = ["-Xmx${maxJVMHeapSize}"]

version = 1.0

repositories { mavenCentral() }

sourceSets.all { set ->   
    def jarTask = task("${set.name}Jar", type: Jar) {    
        baseName = baseName + "-$set.name"
        from set.output
    }

    artifacts { archives jarTask }
}

sourceSets {
    api
    impl
}

dependencies {
    implCompile sourceSets.api.output

    implCompile group: 'com.google.guava', name: 'guava', version: '18.0'
    //implCompile group: 'edu.stanford.nlp', name: 'stanford-parser', version: '2.0.2'
    //implCompile group: 'org.apache.lucene', name: 'lucene-wordnet', version: '3.3.0'
    implCompile group: 'org.apache.opennlp', name: 'opennlp-tools', version: '1.6.0'
    implRuntime group: 'edu.washington.cs.knowitall', name: 'opennlp-tokenize-models', version: '1.5'
    implRuntime group: 'edu.washington.cs.knowitall', name: 'opennlp-sent-models', version: '1.5'
    implRuntime group: 'edu.washington.cs.knowitall', name: 'opennlp-postag-models', version: '1.5'
    //implRuntime group: 'edu.washington.cs.knowitall', name: 'opennlp-chunk-models', version: '1.5'
    //implRuntime group: 'edu.washington.cs.knowitall', name: 'opennlp-parse-models', version: '1.5'
   	implCompile 'commons-cli:commons-cli:1.3'
	implCompile 'org.apache.pdfbox:pdfbox:1.8.10'
    
	
    
    testCompile 'junit:junit:4.9'
    testCompile 'org.mockito:mockito-all:1.10.19'
    testCompile group: 'com.google.guava', name: 'guava', version: '18.0'
    testCompile group: 'org.apache.opennlp', name: 'opennlp-tools', version: '1.6.0'
    testCompile 'commons-cli:commons-cli:1.3'
    
    testCompile 'org.apache.pdfbox:pdfbox:1.8.10'
    testRuntime group: 'edu.washington.cs.knowitall', name: 'opennlp-tokenize-models', version: '1.5'
    testRuntime group: 'edu.washington.cs.knowitall', name: 'opennlp-sent-models', version: '1.5'
    testRuntime group: 'edu.washington.cs.knowitall', name: 'opennlp-postag-models', version: '1.5'
 
    testCompile sourceSets.api.output
    testCompile sourceSets.impl.output

    runtime configurations.apiRuntime
    runtime configurations.implRuntime
}

jar {
    from sourceSets.api.output
    from sourceSets.impl.output
}

task buildArticleRepository (dependsOn: 'classes', type: JavaExec) {
    main = 'com.zeen.plagiarismchecker.application.impl.ArticleRepositoryBuilder'
    classpath = sourceSets.impl.runtimeClasspath
  	if ( project.hasProperty("appArgs") ) {
        args Eval.me(appArgs)
        //gradle buildArticleRepository -PappArgs="['--pdfTextFileFolders', 'pdfTextFileFolder1,pdfTextFileFolder2','--articleRepositoryFolder', 'articles','--overwrite', '--lowercase']"
    }
}

task buildIndex (dependsOn: 'classes', type: JavaExec) {
    main = 'com.zeen.plagiarismchecker.application.impl.IndexBuilder'
    maxHeapSize = maxJVMHeapSize
    classpath = sourceSets.impl.runtimeClasspath
  	if ( project.hasProperty("appArgs") ) {
        args Eval.me(appArgs)
        //gradle buildIndex -PappArgs="['--articleRepositoryFolders', 'articles','--contentAnalyzers','SimpleContentAnalizerWithSimpleTokenizer,BagOfWordsContentAnalizerWithOpenNLPTokenizer,SegmentContentAnalizerWithSimpleSegmentSplitter','--indexPath','indexes','--capability','100000','--batchSize','1000','--parallelism','2']"
        
    }
}

test {   
    exclude 'com/zeen/plagiarismchecker/impl/*PerfTest*'   
}

task perfTest( type: Test ) {
    include 'com/zeen/plagiarismchecker/impl/*PerfTest*'    
    maxHeapSize = maxJVMHeapSize
}

tasks.withType(JavaExec) {
    jvmArgs "-Djava.util.logging.config.file=logging.properties"   
}


